var IR = {}; var comData = {}; var xLine = function () { return { x1: 5, x2: comData.width - 5, count: comData.xLineCount, yText: 4, yStart: parseInt(comData.titleHeight) + parseInt(comData.barHeight) + parseInt(comData.barLineHeight), yStep: function () { return (comData.height - this.yStart - comData.footHeight) / this.count }, data: function () { var arr = new Array(); for (var i = 0; i <= parseInt(this.count) ; i++) { arr[i] = parseInt(this.yStart) + parseInt(this.yStep()) * i } return arr } } }; var yLine = function (n) { return { y1: d3.min(xLine().data()) - 20, y2: d3.max(xLine().data()), xStart: (n == 2) ? 48 : (n == 3) ? 85 : (n == 5) ? 75 : (n == 10) ? 36 : 52, xEnd: (comData.annualScale1.length > 0) ? 44 : 5, xText: (n == 2) ? 62 : (n == 3) ? 25 : (n == 5 || n == 10) ? 15 : (n == 6) ? 11 : 4, xStep: function () { var number = (n == 12) ? 6 : (n == 10) ? 5 : n; return (comData.width - this.xEnd - this.xStart) / number }, data: function () { var arr = new Array(); var number = (n == 12) ? 6 : (n == 10) ? 5 : n; for (var i = 0; i < number; i++) { arr[i] = parseInt(this.xStart) + parseInt(this.xStep()) * i } return arr }, bardouble: function () { var arr = new Array(); var number = (n == 12) ? 6 : n; for (var i = 0; i < number; i++) { arr[i] = parseInt(this.xStart) + 24 + parseInt(this.xStep()) * i } return arr } } }; var yScale = function (n) { return d3.scale.linear().domain([0, n]).range([0, d3.max(this.xLine().data()) - d3.min(this.xLine().data())]) }; var descSet = { xRect: 10, width: 25, height: 15, yRect: [275, 295, 315, 335, 355, 375], xText: 42, yText: [288, 308, 328, 348, 368, 388], txtData: ["Devices and Consumer Licensing", "Computing and Gaming Hardware", "Phone Hardware", "Devices and Consumer Other", "Commercial Licensing", "Commercial Other"] }; IR.ChartView = function (params) { comData = { chartType: "bar", renderTo: "div", precision: 2, width: 400, height: 320, scale: 1, xLineCount: 3, titleHeight: 28, title: "REVENUE", subTitle: "(In billions)", barHeight: 20, barWidth: 130, bar1Label: "Quartely", bar2Label: "Annual", barLineHeight: 36, footHeight: 80, annualScale: [], annualScale1: [], quarterlyScale: [], quarterlyScale1: [], annualText: [], quarterlyText: [], annualValue: [], annualValue1: [], annualValue2: [], quarterlyValue: [], quarterlyValue1: [], quarterlyValue2: [], color: [] }; comData.scale = parseFloat(params.width / comData.width).toFixed(1); for (var i in params) { if (!(i == "width" || i == "height")) { comData[i] = params[i] } } switch (comData.chartType) { case "bar": createBar(comData.renderTo); break; case "barversus": createBarVersus(comData.renderTo); break; case "bardouble": createBarDouble(comData.renderTo); break; case "barsegment": comData.height = 420; createBarSegment(comData.renderTo); break; case "pie": comData.height = 420; createPie(comData.renderTo); break; default: createBar(comData.renderTo); break } };